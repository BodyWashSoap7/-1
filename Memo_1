//바라보는 방향으로 발사, 플레이어가 회전해도 방향 변하지 않음 (초풍진각 구현)

// 화염방사기 무기 클래스
class FlameWeapon extends Weapon {
  constructor() {
    super({
      type: 'flame',
      baseCooldown: 3000, // 3초 쿨타임
      damage: 15 // 데미지 증가
    });
    this.flameAngle = Math.PI / 3; // 60도 부채꼴
    this.range = 200; // 범위
    this.duration = 5000; // 지속시간 5초
    this.activeFlames = []; // 활성화된 화염 효과 저장
  }
  
  fire() {
    // 마우스 방향으로 화염 생성 (자동 조준이 아님)
    // 플레이어와 마우스 간의 각도 계산
    const dx = mouseWorldX - player.x;
    const dy = mouseWorldY - player.y;
    const directionAngle = Math.atan2(dy, dx);
    
    const flame = new FlameEffect(
      player.x, 
      player.y,
      this.flameAngle,
      directionAngle, // 마우스 방향 각도
      this.range,
      this.damage * player.attackPower,
      this.duration
    );
    
    this.activeFlames.push(flame);
    gameObjects.bullets.push(flame);
  }
  
  update() {
    // 기존 업데이트 로직 실행
    super.update();
    
    // 활성화된 화염 중 사용 완료된 것 제거
    this.activeFlames = this.activeFlames.filter(flame => !flame.used);
  }
}

// 화염 효과 클래스 (기존 FlameBullet 대체)
class FlameEffect {
  constructor(x, y, angle, direction, range, damage, duration) {
    this.x = x;
    this.y = y;
    this.angle = angle; // 부채꼴 각도
    this.direction = direction; // 화염 방향 (마우스 방향)
    this.range = range; // 최대 범위
    this.damage = damage; // 데미지
    this.duration = duration; // 지속 시간
    this.startTime = Date.now(); // 생성 시간
    this.used = false; // 사용 여부
    
    // 방향은 생성 시점에 고정 (화염 방향이 마우스를 따라 변하지 않음)
    this.fixedDirection = direction;
    
    // 애니메이션 관련 속성
    this.currentFrame = 0;
    this.frameCount = 4;
    this.frameWidth = 64;
    this.frameHeight = 64;
    this.frameTime = 0;
    this.frameDuration = 125; // 4프레임 x 125ms = 500ms (전체 애니메이션 시간)
  }
  
  update() {
    // 지속 시간 체크
    if (Date.now() - this.startTime >= this.duration) {
      this.used = true;
      return;
    }
    
    // 애니메이션 프레임 업데이트
    this.frameTime += 16;
    if (this.frameTime >= this.frameDuration) {
      this.frameTime = 0;
      this.currentFrame = (this.currentFrame + 1) % this.frameCount;
    }
    
    // 플레이어 위치에 고정 (플레이어 따라다님)
    this.x = player.x;
    this.y = player.y;
    
    // 부채꼴 범위 내 적 데미지 처리
    for (let enemy of gameObjects.enemies) {
      if (enemy.state !== 'moving') continue;
      
      // 적과 플레이어 사이의 각도 계산
      const dx = enemy.x - this.x;
      const dy = enemy.y - this.y;
      const distanceToEnemy = Math.sqrt(dx * dx + dy * dy);
      
      // 범위 내에 있는지 확인
      if (distanceToEnemy <= this.range) {
        // 각도 계산
        const angleToEnemy = Math.atan2(dy, dx);
        
        // 각도 차이 계산 (-PI ~ PI 사이로 정규화)
        let angleDiff = angleToEnemy - this.fixedDirection;
        while (angleDiff > Math.PI) angleDiff -= Math.PI * 2;
        while (angleDiff < -Math.PI) angleDiff += Math.PI * 2;
        angleDiff = Math.abs(angleDiff);
        
        // 부채꼴 내에 있는지 확인
        if (angleDiff <= this.angle / 2) {
          // 데미지 적용 (초당 3회 = 16ms마다 데미지/20)
          enemy.takeDamage(this.damage / 20);
        }
      }
    }
  }
  
  draw(offsetX, offsetY) {
    if (!assetManager.loaded.weapons || !assetManager.images.weapons.flame) {
      return;
    }
    
    // 화염 효과 그리기
    ctx.save();
    
    // 플레이어 위치로 이동 후 방향에 맞게 회전
    ctx.translate(this.x + offsetX, this.y + offsetY);
    ctx.rotate(this.fixedDirection);
    
    // 투명도 설정 (시간 경과에 따라 페이드 아웃)
    const elapsed = Date.now() - this.startTime;
    const opacity = 1 - (elapsed / this.duration);
    ctx.globalAlpha = opacity;
    
    // 화염 애니메이션 프레임 그리기
    const frameX = this.currentFrame * this.frameWidth;
    const drawSize = this.range * 0.9; // 화면에 표시될 크기
    
    ctx.drawImage(
      assetManager.images.weapons.flame,
      frameX, 0,
      this.frameWidth, this.frameHeight,
      0, -drawSize/2, // 중앙 정렬
      drawSize, drawSize
    );
    
    ctx.restore();
  }
}
